// Copyright (c) 2016 Brandon Thomas <bt@brand.io>, <echelon@gmail.com>

//! This module contains the EtherDream hardware interface.

use byteorder::LittleEndian;
use byteorder::WriteBytesExt;
use error::EtherdreamError;
use protocol::Begin;
use protocol::COMMAND_PING;
use protocol::COMMAND_PREPARE;
use protocol::DacResponse;
use protocol::Point;
use std::io::Read;
use std::io::Write;
use std::net::IpAddr;
use std::net::TcpStream;

/// An EtherDream DAC.
/// Controls what we display on the projector.
pub struct Dac {
  ip_address: IpAddr,
  stream: TcpStream,
}

impl Dac {
  /// CTOR.
  pub fn new(ip_address: IpAddr) -> Dac {
    let stream = TcpStream::connect((ip_address, 7765u16)).unwrap(); // FIXME
    Dac {
      ip_address: ip_address,
      stream: stream,
    }
  }

  /// IP address the DAC lives at.
  pub fn get_ip_address(&self) -> &IpAddr {
    &self.ip_address
  }

  /// Stream points generated by a function.
  /// The function takes the number of points it needs to generate.
  pub fn play_function<F>(&mut self, mut make_points: F) -> ()
      where F: FnMut(u16) -> Vec<Point> {
    let mut response = self.read_response().unwrap();

    self.try_prepare(response);

    let mut started = false;

    loop {
      let num_points = 1799 - response.status.buffer_fullness;
      let points = make_points(num_points);

      let mut cmd : Vec<u8> = Vec::new();
      cmd.push(0x64); // 'data' command.
      cmd.write_u16::<LittleEndian>(num_points).unwrap();

      for point in points {
        cmd.extend(point.serialize());
      }

      response = self.write_serialized_points(&cmd).unwrap(); // FIXME
      if !response.is_ack() {
        return;
      }

      if !started {
        let response = self.begin().unwrap(); // FIXME
        if !response.is_ack() {
          return;
        }

        started = true;
      }
    }
  }

  fn hello(&mut self) -> Result<DacResponse, EtherdreamError> {
    let cmd = [ COMMAND_PING ];
    self.stream.write(&cmd).unwrap(); // FIXME
    self.read_response()
  }

  fn prepare(&mut self) -> Result<DacResponse, EtherdreamError> {
    let cmd = [ COMMAND_PREPARE ];
    self.stream.write(&cmd).unwrap(); // FIXME
    self.read_response()
  }

  fn begin(&mut self) -> Result<DacResponse, EtherdreamError> {
    let cmd = Begin { low_water_mark: 0, point_rate: 30_000 };
    self.stream.write(&cmd.serialize()).unwrap(); // FIXME
    self.read_response()
  }

  /// Clear emergency stop state.
  fn clear_emergency_stop(&mut self) -> Result<DacResponse, EtherdreamError> {
    let cmd = [ 0x63u8 ]; // 'c'
    self.stream.write(&cmd).unwrap(); // FIXME
    self.read_response()
  }

  fn try_prepare(&mut self, response: DacResponse) {
    // Documentation for playback_flags:
    // [0]: Emergency stop occurred due to E-Stop packet or invalid command.
    // [1]: Emergency stop occurred due to E-Stop input to projector.
    // [2]: Emergency stop input to projector is currently active.
    // [3]: Emergency stop occurred due to overtemperature condition.
    // [4]: Overtemperature condition is currently active.
    // [5]: Emergency stop occurred due to loss of Ethernet link.
    // [15:5]: Future use.
    let response = match response.status.playback_flags {
      0x1 | 0x2 | 0x4 | 0x6 => {
        // A previous E-Stop state must be cleared.
        self.clear_emergency_stop().unwrap() // FIXME
      },
      _ => response,
    };

    if response.status.playback_flags != 0x0 && response.status.playback_flags != 0x1 {
      println!("\nBad playback flags, must PREPARE: {}", response.status.playback_flags);
      println!("\nSend prepare");
      let resp = self.prepare().unwrap();
      println!("Response: {:?}", resp);
      if !resp.is_ack() {
        println!("Failure!");
        panic!("Non-ACK received");
      }
      return;
    }

    if response.status.playback_state == 0x2 {
      println!("\nBad playback_state, must PREPARE: {}", response.status.playback_state);
      println!("\nSend prepare");
      let resp = self.prepare().unwrap();
      println!("Response: {:?}", resp);
      if !resp.is_ack() {
        println!("Failure!");
        panic!("Non-ACK received");
      }
    }
  }

  // TODO:
  // Sends (3 + 18*n) bytes.
  // fn write_data(&mut self, num_points: u16) -> Result<DacResponse, EtherdreamError>

  /// Write a slice of points to the DAC.
  pub fn write_serialized_points(&mut self, serialized_points: &[u8])
                                 -> Result<DacResponse, EtherdreamError> {
    self.stream.write(&serialized_points)?;
    self.read_response()
  }

  fn read(&mut self) {
    let mut buf = [0; 22];
    match self.stream.read(&mut buf) {
      Ok(_size) => {},
      Err(_) => return,
    }

    let response = DacResponse::parse(&buf);

    match response {
      Ok(_r) => {},
      Err(_e) => {},
    };
  }

  fn read_response(&mut self) -> Result<DacResponse, EtherdreamError> {
    let mut buf = [0; 22];
    let _size = self.stream.read(&mut buf)?;
    DacResponse::parse(&buf)
  }
}
